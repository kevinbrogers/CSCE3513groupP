#include "chip8.h"
#include <cstdlib>
#include <stdio.h>
#include <time.h>

chip8::chip8()
{
    
}

chip8::~chip8()
{
    
}

void chip8::initialize()
{
    pc     = 0x200;
    opcode = 0;
    I      = 0;
    sp     = 0;
    
    // Clear Display
    for (int i = 0; i < PIXELS; ++i)
        graphics[i] = 0;
    
    // Clear stack, registers, and keys
    for (int i = 0; i < STACK; ++i) {
        stack[i] = 0;
        V[i] = 0;
        keys[i] = 0;
    }
    
    // Clear memory
    for (int i = 0; i < MEMORY; ++i)
        memory[i] = 0;
    
    // load fontset
        //insert code here
    
    // Reset timers
    delayTimer = 0;
    soundTimer = 0;
    
    // Clear Screen once
    drawFlag = true;
    
    srand(time(NULL));
}

void chip8::emulateCycle()
{
    // Fetch opcode
    opcode = memory[pc] << 8 | memory[pc + 1];
    
    //insert opcode switch case here
    switch(opcode & 0xF000) // checks left most 4 bits 
	{
		case 0x0000: //none of the left most 4 bits of the opcode are 1
			switch(opcode & 0x000F)//check right most 4 bits 
				{
                                        case 0x0000: // opcode 0x00E0 meant to clear the screen
						for(int i = 0 ; i < PIXELS; ++i)
							graphics[i] = 0x0;
                                                
						drawFlag = true;
						pc += 2;
					break;
                                        //----------------------------------------------------------------------------------------------------------------------
					case 0x000E: // E value in the right most 4 bits op 0x00EE
						--sp;
						pc = stack[sp];
						pc +=2;
					break;
                                        //----------------------------------------------------------------------------------------------------------------------
				}
		break;
//----------------------------------------------------------------------------------------------------------------------
		case 0x1000: //op 0x1NNN
			pc = opcode & 0x0FFF;
		break;
//----------------------------------------------------------------------------------------------------------------------
		case 0x2000: // op 0x2NNN
			stack[sp] = pc;			
			++sp;					
			pc = opcode & 0x0FFF;	
		break;
//----------------------------------------------------------------------------------------------------------------------
		case 0x3000: // op 0x3XNN
			if(V[(opcode & 0x0F00) >> 8] == (opcode & 0x00FF))
				pc += 4;
			else
				pc += 2;
		break;
//----------------------------------------------------------------------------------------------------------------------
		case 0x4000: //  op 0x4XNN
			if(V[(opcode & 0x0F00) >> 8] != (opcode & 0x00FF))
				pc += 4;
			else
				pc += 2;
		break;
//----------------------------------------------------------------------------------------------------------------------
		case 0x5000: // op 0x5XY0
			if(V[(opcode & 0x0F00) >> 8] == V[(opcode & 0x00F0) >> 4])
				pc += 4;
			else
				pc += 2;
		break;
//----------------------------------------------------------------------------------------------------------------------
		case 0x6000: //  op 0x6XNN
			V[(opcode & 0x0F00) >> 8] = opcode & 0x00FF;

			pc += 2;
		break;
//----------------------------------------------------------------------------------------------------------------------
		case 0x7000: // op 0x7XNN
			V[(opcode & 0x0F00) >> 8] += opcode & 0x00FF;
			pc += 2;
		break;
//----------------------------------------------------------------------------------------------------------------------      
                case 0x8000:
                        switch (opcode & 0x000F)
                         {
                            case 0x0000: // 0x8XY0 -- sets VX to value of VY
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x00F0) >> 4];
                                pc += 2;
                            break;
                            //----------------------------------------------------------------------------------------------------------------------                          
                            case 0x0001: // 0x8XY1 -- sets VX to VX || VY
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] | V[(opcode & 0x00F0) >> 4];
                                pc += 2;
                            break;
                            //----------------------------------------------------------------------------------------------------------------------
                            case 0x0002: // 0x8XY2 -- sets VX to VX && VY
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] & V[(opcode & 0x00F0) >> 4];
                                pc += 2;
                            break;
                            //----------------------------------------------------------------------------------------------------------------------
                            case 0x0003: // 0x8XY3 -- sets VX to VX XOR VY
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] ^ V[(opcode & 0x00F0) >> 4];
                                pc += 2;
                            break;
                            //----------------------------------------------------------------------------------------------------------------------
                            case 0x0004: // 0x8XY4 -- adds VY to VX, VF is set to 1 when there is a carry, and 0 when else
                                if (V[(opcode & 0x00F0) >> 4] > (0xFF - V[(opcode & 0x0F00) >> 8]))
                                    V[0xF] = 1; 
                                else
                                    V[0xF] = 0;
                                
                                V[(opcode & 0x0F00) >> 8] += V[(opcode & 0x00F0) >> 4];
                                pc += 2;
                            break;
                            //----------------------------------------------------------------------------------------------------------------------
                            case 0x0005: // 0x8XY5 -- subtracts VY from VX, VF is set to 0 when there is a borrow, 1 when there isn't
                                if (V[(opcode & 0x00F0) >> 4] > V[(opcode & 0x0F00) >> 8])
                                    V[0xF] = 0;
                                else
                                    V[0xF] = 1;
                                
                                V[(opcode & 0x0F00) >> 8] -= V[(opcode & 0x00F0) >> 4];
                                pc += 2;
                                
                            break;
                            //----------------------------------------------------------------------------------------------------------------------
                            case 0x0006: // 0x8XY6 -- shifts VX to the right by one. VF is set to value of least significant bit before shift
                                V[0xF] = V[(opcode & 0x0F00) >> 8] & 0x1;
                                
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] >> 1;
                                pc += 2;
                            break;
                            //----------------------------------------------------------------------------------------------------------------------
                            case 0x0007: // 0x8XY7 -- sets VX to (VY - VX), VF = 0 when there is a borrow, VF = 1 when there isn't 
                                if (V[(opcode & 0x0F00) >> 8] > V[(opcode & 0x00F0) >> 4])
                                    V[0xF] = 0;
                                else
                                    V[0xF] = 1;
                                
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x00F0) >> 4] - V[(opcode & 0x0F00) >> 8];
                                pc += 2;
                            break;
                            //----------------------------------------------------------------------------------------------------------------------
                            case 0x000E: // 0x8XYE -- shifts VX to left by one, VF is set to value of most significant bit before the shift
                                V[0xF] = V[(opcode & 0x0F00) >> 8] >> 7;
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] << 1;
                                pc += 2;
                            break;
                            //----------------------------------------------------------------------------------------------------------------------
                         }
                break;    
//----------------------------------------------------------------------------------------------------------------------
                case 0x9000: // 9XY0 -- skips the next instruction if VX != VY
                    if (V[(opcode & 0x0F00) >> 8] != V[(opcode & 0x00F0) >> 4])
                        pc += 4;
                    else
                        pc += 2;
                break;
//----------------------------------------------------------------------------------------------------------------------
                case 0xA000: // ANNN -- sets I to the address NNN
                    I = opcode & 0x0FFF;
                    pc += 2;
                break;
//----------------------------------------------------------------------------------------------------------------------
                case 0xB000: // BNNN -- jumps to the address NNN plus V0
                    pc = (opcode & 0x0FFF) + V[0x0];
                break;
//----------------------------------------------------------------------------------------------------------------------
                case 0xC000: // CXNN -- sets VX to a random number and NN
                    V[(opcode & 0x0F00) >> 8] = (rand() % 0xFF) & (opcode & 0x00FF);
                    pc += 2;
                break;
//----------------------------------------------------------------------------------------------------------------------           
                case 0xD000: // DXYN -- draws a sprite at coordinate (VX, VY) that has a width of 8 pixels, and height of N pixels
                             // each row of 8 pixels is read as bit-coded (most significant bit of each byte displayed on the left)
                             // starting from mem location I; I value doesn't change after execution of the instruction.
                             // VF is set to 1 if any screen pixels are flipped from set to unset when the sprite is drawn, and 
                             // to 0 if it doesn't happen
            
                    unsigned short x = V[(opcode & 0x0F00) >> 8];
                    unsigned short y = V[(opcode & 0x00F0) >> 8];
                    unsigned short height = opcode & 0x000F;
                    unsigned short pixel;
                    
                    //draw code
                    // not finished
                    
                    drawFlag = true;
                    pc += 2;
                break;
//----------------------------------------------------------------------------------------------------------------------
                case 0xE000:
                    switch (opcode & 0x000F)
                    {
                        case 0x000E: // EX9E -- skips the next instruction if the key stored in VX is pressed
                            if (V[(opcode & 0x0F00) >> 8] != 0)
                                pc += 4;
                            else
                                pc += 2;
                        break;
                        //----------------------------------------------------------------------------------------------------------------------                    
                        case 0x0001: // EXA1 -- skips the next instruction if the key stored in VX isn't pressed
                            if (V[(opcode & 0x0F00) >> 8] == 0)
                                pc += 2;
                            else
                                pc += 4;
                        break;
                    }
               
                break;
//----------------------------------------------------------------------------------------------------------------------
                
		// implemented: 00E0, 00EE, 1NNN, 2NNN, 3XNN, 4XNN, 5XY0, 6XNN, 7XNN  -- Kevin walsh
                // implemented: FX07, FX0A, FX15, FX18, FX1E, FX29, FX33, FX55, FX65  
                // implemented: 8XY0, 8XY1, 8XY2, 8XY3, 8XY4, 8XY5, 8XY6, 8XY7, 8XYE  -- Kevin spry
                // implemented: ANNN, BNNN, CXNN, DXYN, EX9E, EXA1                    
	}
    
    
    
    // Update timers
    if (delayTimer > 0)
        --delayTimer;
    
    if (soundTimer > 0)
    {
        if (soundTimer == 1)
            //make some noise
            
        --soundTimer;
    }
    
    printf("Cycle completed.\n");
}

void chip8::render()
{
    // Draw code goes here
    
}

bool chip8::loadROM(const char * filename)
{   
    printf("Loading: %s...\n", filename);
    
    
    // Open fie
    FILE * file = fopen(filename, "r");
    if (file == NULL) {
        fputs("File error", stderr);
        return false;
    }
    
    //check fie size
    fseek(file, 0, SEEK_END);
    long fSize = ftell(file);
    rewind(file);
    printf("Filesize: %d\n", (int)fSize);
    
    //allocate memory to contain the whole file
    char * buffer = (char*)malloc(sizeof(char) * fSize);
    if (buffer == NULL) {
        fputs("Memory error", stderr);
        return false;
    }
    
    //copy file into buffer
    size_t result = fread(buffer, 1, fSize, file);
    if (result != fSize) {
        fputs("Reading error", stderr);
        return false;
    }
    
    //copy buffer into Chip8 memory
    if ((4096 - 512) > fSize) {
        for (int i = 0; i < fSize; ++i)
            memory[i + 512] = buffer[i];
    }
    else
        printf("Error: ROM too big for memory");
    
    // close file, free buffer
    fclose(file);
    free(buffer);
    
    // will return false in previous lines if error
    printf("ROM successfully loaded\n\n");
    return true; 
}


