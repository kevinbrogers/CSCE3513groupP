#include "chip8.h"
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <ncurses.h>

unsigned char fontset[80] =
{
   0xF0, 0x90, 0x90, 0x90, 0xF0, //0
   0x20, 0x60, 0x20, 0x20, 0x70, //1
   0xF0, 0x10, 0xF0, 0x80, 0xF0, //2
   0xF0, 0x10, 0xF0, 0x10, 0xF0, //3
   0x90, 0x90, 0xF0, 0x10, 0x10, //4
   0xF0, 0x80, 0xF0, 0x10, 0xF0, //5
   0xF0, 0x80, 0xF0, 0x90, 0xF0, //6
   0xF0, 0x10, 0x20, 0x40, 0x40, //7
   0xF0, 0x90, 0xF0, 0x90, 0xF0, //8
   0xF0, 0x90, 0xF0, 0x10, 0xF0, //9
   0xF0, 0x90, 0xF0, 0x90, 0x90, //A
   0xE0, 0x90, 0xE0, 0x90, 0xE0, //B
   0xF0, 0x80, 0x80, 0x80, 0xF0, //C
   0xE0, 0x90, 0x90, 0x90, 0xE0, //D
   0xF0, 0x80, 0xF0, 0x80, 0xF0, //E
   0xF0, 0x80, 0xF0, 0x80, 0x80 //F
};

chip8::chip8()
{

}

chip8::~chip8()
{

}

void chip8::initialize()
{
    pc = 0x200;
    opcode = 0;
    I = 0;
    sp = 0;
    
    // Clear Display
    for (int i = 0; i < PIXELS; ++i)
        graphics[i] = 0;
    
    // Clear stack, registers, and keys
    for (int i = 0; i < STACK; ++i) {
        stack[i] = 0;
        V[i] = 0;
        keys[i] = 0;
    }

    // Clear memory
    for (int i = 0; i < MEMORY; ++i)
        memory[i] = 0;

    // load fontset
    for (int i = 0; i < 80; i++)
        memory[i] = fontset[i];

    // Reset timers
    delay_timer = 0;
    sound_timer = 0;

    // Clear Screen once
    drawFlag = true;

    srand(time(NULL));
}

void chip8::emulateCycle()
{
    // Fetch opcode
    opcode = memory[pc] << 8 | memory[pc + 1];

// Execute opcode
    switch(opcode & 0xF000) // checks left most 4 bits
    {
        case 0x0000: //none of the left most 4 bits of the opcode are 1
        {               switch(opcode & 0x000F)//check right most 4 bits
                            {
                                case 0x0000: // opcode 0x00E0 meant to clear the screen
                                {
                                        for(int i = 0 ; i < PIXELS; ++i)
                                                graphics[i] = 0x0;

                                        drawFlag = true;
                                        pc += 2;
                                }break;
                                //-----------------------------------------------------------------------$
                                case 0x000E: // E value in the right most 4 bits op 0x00EE
                                {
                                        --sp;
                                        pc = stack[sp];
                                        pc +=2;
                                }break;
                                //-----------------------------------------------------------------------$
                                default:
                                        printf("unknown opcode in [0x0000]: 0x%X\n", opcode);

                            }//ends inner switch
        }break;//ends 0x0000
//-------------------------------------------------------------------------------------------------------$
        case 0x1000: //op 0x1NNN
        {
                pc = opcode & 0x0FFF;
        }break;
//-------------------------------------------------------------------------------------------------------$
        case 0x2000: // op 0x2NNN
        {
                stack[sp] = pc;
                ++sp;
                pc = opcode & 0x0FFF;
        }break;
//-------------------------------------------------------------------------------------------------------$
        case 0x3000: // op 0x3XNN
        {
                if(V[(opcode & 0x0F00) >> 8] == (opcode & 0x00FF))
                        pc += 4;
                else
                        pc += 2;
        }break;
//-------------------------------------------------------------------------------------------------------$
        case 0x4000: // op 0x4XNN
        {
                if(V[(opcode & 0x0F00) >> 8] != (opcode & 0x00FF))
                        pc += 4;
                else
                        pc += 2;
        }break;
//-------------------------------------------------------------------------------------------------------$
        case 0x5000: // op 0x5XY0
        {
                if(V[(opcode & 0x0F00) >> 8] == V[(opcode & 0x00F0) >> 4])
                        pc += 4;
                else
                        pc += 2;
        }break;
//-------------------------------------------------------------------------------------------------------$
        case 0x6000: // op 0x6XNN
        {
                V[(opcode & 0x0F00) >> 8] = opcode & 0x00FF;
                pc += 2;
        }break;
//-------------------------------------------------------------------------------------------------------$
        case 0x7000: // op 0x7XNN
        {
                V[(opcode & 0x0F00) >> 8] += opcode & 0x00FF;
                pc += 2;
        }break;
//-------------------------------------------------------------------------------------------------------$
        case 0x8000:
        {
                switch (opcode & 0x000F)
                {
                            case 0x0000: // 0x8XY0 -- sets VX to value of VY
                            {
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x00F0) >> 4];
                                pc += 2;
                            }break;
//---------------------------------------------------------------------------$
                            case 0x0001: // 0x8XY1 -- sets VX to VX || VY
                            {
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] | V[(opcode & 0x00F$
                                pc += 2;
                            }break;
                            //---------------------------------------------------------------------------$
                            case 0x0002: // 0x8XY2 -- sets VX to VX && VY
                            {
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] & V[(opcode & 0x00F$
                                pc += 2;
                            }break;
                            //---------------------------------------------------------------------------$
                            case 0x0003: // 0x8XY3 -- sets VX to VX XOR VY
                            {
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] ^ V[(opcode & 0x00F$
                                pc += 2;
                            }break;
                            //---------------------------------------------------------------------------$
                            case 0x0004: // 0x8XY4 -- adds VY to VX, VF is set to 1 when there is a carry$
                            {
                                if (V[(opcode & 0x00F0) >> 4] > (0xFF - V[(opcode & 0x0F00) >> 8]))
                                    V[0xF] = 1;
                                else
                                    V[0xF] = 0;

                                V[(opcode & 0x0F00) >> 8] += V[(opcode & 0x00F0) >> 4];
                                pc += 2;
                            }break;
                            //---------------------------------------------------------------------------$
                            case 0x0005: // 0x8XY5 -- subtracts VY from VX, VF is set to 0 when there is $
                            {
                                if (V[(opcode & 0x00F0) >> 4] > V[(opcode & 0x0F00) >> 8])
                                    V[0xF] = 0;
                                else
                                    V[0xF] = 1;

                                V[(opcode & 0x0F00) >> 8] -= V[(opcode & 0x00F0) >> 4];
                                pc += 2;

                            }break;
                            //---------------------------------------------------------------------------$
                            case 0x0006: // 0x8XY6 -- shifts VX to the right by one. VF is set to value o$
                            {
                                V[0xF] = V[(opcode & 0x0F00) >> 8] & 0x1;
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] >> 1;
                                pc += 2;
                            }break;
                            //---------------------------------------------------------------------------$
                            case 0x0007: // 0x8XY7 -- sets VX to (VY - VX), VF = 0 when there is a borrow$
                            {
                                if (V[(opcode & 0x0F00) >> 8] > V[(opcode & 0x00F0) >> 4])
                                    V[0xF] = 0;
                                else
                                    V[0xF] = 1;

                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x00F0) >> 4] - V[(opcode & 0x0F0$
                                pc += 2;
                            }break;
                            //---------------------------------------------------------------------------$
                            case 0x000E: // 0x8XYE -- shifts VX to left by one, VF is set to value of mos$
                            {
                                V[0xF] = V[(opcode & 0x0F00) >> 8] >> 7;
                                V[(opcode & 0x0F00) >> 8] = V[(opcode & 0x0F00) >> 8] << 1;
                                pc += 2;
                            }break;
                            //---------------------------------------------------------------------------$
                            default:
                                printf("unknown opcode in [0x8000]: 0x%X\n", opcode);

                }//ends inner switch
        }break;
//-------------------------------------------------------------------------------------------------------$
                case 0x9000: // 9XY0 -- skips the next instruction if VX != VY
                {
                    if (V[(opcode & 0x0F00) >> 8] != V[(opcode & 0x00F0) >> 4])
                        pc += 4;
                    else
                        pc += 2;
                }break;
//-------------------------------------------------------------------------------------------------------$
                case 0xA000: // ANNN -- sets I to the address NNN
                {
                    I = opcode & 0x0FFF;
                    pc += 2;
                }break;
//-------------------------------------------------------------------------------------------------------$
                case 0xB000: // BNNN -- jumps to the address NNN plus V0
                {
                    pc = (opcode & 0x0FFF) + V[0x0];
                }break;
//-------------------------------------------------------------------------------------------------------$
                case 0xC000: // CXNN -- sets VX to a random number and NN
                {
                    V[(opcode & 0x0F00) >> 8] = (rand() % 0xFF) & (opcode & 0x00FF);
                    pc += 2;
                }break;
//-------------------------------------------------------------------------------------------------------$
                case 0xD000: // DXYN -- draws a sprite at coordinate (VX, VY) that has a width of 8 pixel$
                {            // each row of 8 pixels is read as bit-coded (most significant bit of each b$
                             // starting from mem location I; I value doesn't change after execution of t$
                             // VF is set to 1 if any screen pixels are flipped from set to unset when th$
                             // to 0 if it doesn't happen

                    unsigned short vx = V[(opcode & 0x0F00) >> 8];
                    unsigned short vy = V[(opcode & 0x00F0) >> 8];
                    unsigned short height = opcode & 0x000F;
                    unsigned short pixel;

                    V[0xF] = 0;

                    // loop through rows
                    for (int y = 0; y < height; y++) {

                        pixel = memory[I + y];

                        // loop through columns
                        for (int x = 0; x < 8; x++) {

                            // check if current evaluated pixel = 1
                            if (pixel & (0x80 >> x) != 0) {

                                // check if pixel on display = 1, if true register the collision
                                if (graphics[(vx + x + ((y + vy) * 64))] == 1)
                                    V[0xF] = 1;

                                // set pixel value by using XOR
                                graphics[x + vx + ((y + vy) * 64)] ^= 1;
                            }
                        }
                    }

                    drawFlag = true;
                    pc += 2;
                }break;
//-------------------------------------------------------------------------------------------------------$
                case 0xE000:
                {
                    switch (opcode & 0x000F)
                    {
                        case 0x000E: // EX9E -- skips the next instruction if the key stored in VX is pre$
                        {
                            if (keys[V[(opcode & 0x0F00) >> 8]] != 0)
                                pc += 4;
                            else
                                pc += 2;
                        }break;
                        //-------------------------------------------------------------------------------$
                        case 0x0001: // EXA1 -- skips the next instruction if the key stored in VX isn't $
                        {
                            if (keys[V[(opcode & 0x0F00) >> 8]] == 0)
                                pc += 2;
                            else
                                pc += 4;
                        }break;

                        default:
                            printf ("unknown opcode in [0xE000]: 0x%X\n", opcode);
                    }//ends inner switch case
                }break;//ends 0xE000
//-------------------------------------------------------------------------------------------------------$
        case 0xF000:
        {
                switch (opcode & 0x00FF)
                {
                        case 0x0007: //FX07 -- sets the value of VX to the value of the delay timer
                        {
                                V[(opcode & 0x0F00) >> 8] = delay_timer;
                                pc += 2;
                        }break;
                        //-------------------------------------------------------------------------------$
                        case 0x000A: // FX07 -- waits for a key press and stores the key press in VX
                        {
                                bool keyPress = false;
                                for (int i = 0; i < 16; ++i)
                                {
                                        if (keys[i] != 0)
                                        {
                                          V[(opcode & 0x0F00) >> 8] = i;
                                          keyPress = true;
                                        }
                                }
                                // if no key was pressed then the cycle is skipped and tried again
                                if (!keyPress)
                                        return;
                                pc += 2;
                        }break;
                        //-------------------------------------------------------------------------------$
                        case 0x0015: // FX15 -- set the delay timer to the value of VX
                        {
                                delay_timer = V[(opcode & 0x0F00) >> 8];
                                pc +=2;
                        }break;
                        //-------------------------------------------------------------------------------$
                        case 0x0018: // FX18 -- sets the sound timer to the value in VX
                        {
                                sound_timer = V[(opcode & 0x0F00) >> 8];
                                pc += 2;
                        }break;
                        //-------------------------------------------------------------------------------$
                        case 0x001E: // FX1E -- adds the value of VX to the value of I
                        {
                                if (I + V[(opcode & 0x0F00) >> 8] > 0xFFF)
                                        V[0xF] = 1; // VF set to 1 if range is exceeded
                                else
                                        V[0xF] = 0; // VF set to 0 if range is not exceeded

                                I += V[(opcode & 0x0F00) >> 8];
                                pc += 2;
                        }break;
                        //-------------------------------------------------------------------------------$
                        case 0x0029: // FX29 -- sets I to the location of the sprite for the value of VX
                        {
                                I = V[(opcode & 0x0F00) >> 8] * 0x5;
                                pc += 2;
                        }break;
                        //-------------------------------------------------------------------------------$
                        case 0x0033: // FX33 -- stores the decimal value of VX at address I , I + 1 , and$
                        {
                                memory[I] = V[(opcode & 0x0F00) >> 8] / 100;
                                memory[I + 1] = (V[(opcode & 0x0F00) >> 8] / 10) % 10;
                                memory[I + 2] = (V[(opcode & 0x0F00) >> 8] % 100) % 10;
                                pc += 2;
                        }break;
                        //-------------------------------------------------------------------------------$
                        case 0x0055: // FX55 -- stores V0 to VX in memory starting at address I
                        {
                                for (int i = 0; i <= ((opcode & 0x0F00) >> 8); i++)
                                        memory[I + i] = V[i];

                                // on original interpreter, when operation is done I = I + X + 1;
                                I += ((opcode & 0x0F00) >> 8) + 1;

                                pc += 2;
                        }break;
                        //-------------------------------------------------------------------------------$
                        case 0x0065: // FX65 -- fills V0 to VX with values from memory starting at addres$
                        {
                                for (int i = 0; i <= ((opcode & 0x0F00) >> 8); i++)
                                        V[i] = memory[I + i];

                                // on original interpreter, when operation is done I = I + X + 1;
                                I += ((opcode & 0x0F00) >> 8) + 1;

                                pc += 2;
                        }break;

                        default:
                                printf("unknown opcode in [0xF000]: 0x%X\n", opcode);
               }//ends inner switch
        }//ends 0xF000

                // implemented: 00E0, 00EE, 1NNN, 2NNN, 3XNN, 4XNN, 5XY0, 6XNN, 7XNN -- Kevin walsh
                // implemented: FX07, FX0A, FX15, FX18, FX1E, FX29, FX33
                // implemented: 8XY0, 8XY1, 8XY2, 8XY3, 8XY4, 8XY5, 8XY6, 8XY7, 8XYE -- Kevin spry
                // implemented: ANNN, BNNN, CXNN, DXYN, EX9E, EXA1, FX55, FX65
    }//ends opcode switch case


    // Update timers
    if (delay_timer > 0)
        --delay_timer;

    if (sound_timer > 0)
    {
        //if (soundTimer == 1)
            beep();

        --sound_timer;
    }

    printf("Cycle completed.\n");
}

void chip8::render()
{
    for(int x=0; x<32; x++)
    {
        for(int y=0; y<64; y++)
        {
            if(graphics[(x*64)+y]==0)
	    {
		wattron(emWin, COLOR_PAIR(1));
		mvwaddch(emWin, x, y, '0');  //color pixel black
		wattroff(emWin, COLOR_PAIR(1));
	    }
            else
            {
		wattron(emWin, COLOR_PAIR(2));
                mvwaddch(emWin, x, y, ' ');  //color pixel white
		wattroff(emWin, COLOR_PAIR(2));
	    }
        }
    }
    drawFlag=false;
}

bool chip8::loadROM(const char * filename)
{
    printf("Loading: %s...\n", filename);

    // Open fie
    FILE * file = fopen(filename, "r");
    if (file == NULL) {
        fputs("File error", stderr);
        return false;
    }

    //check fie size
    fseek(file, 0, SEEK_END);
    long fSize = ftell(file);
    rewind(file);
    printf("Filesize: %d\n", (int)fSize);

    //allocate memory to contain the whole file
    char * buffer = (char*)malloc(sizeof(char) * fSize);
    if (buffer == NULL) {
        fputs("Memory error", stderr);
        return false;
    }

    //copy file into buffer
    size_t result = fread(buffer, 1, fSize, file);
    if (result != fSize) {
        fputs("Reading error", stderr);
        return false;
    }

    //copy buffer into Chip8 memory
    if ((4096 - 512) > fSize) {
        for (int i = 0; i < fSize; ++i)
            memory[i + 512] = buffer[i];
    }
    else
        printf("Error: ROM too big for memory");

    // close file, free buffer
    fclose(file);
    free(buffer);

    // will return false in previous lines if error
    printf("ROM successfully loaded\n\n");
    return true;
}

